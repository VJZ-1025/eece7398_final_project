import textworld.gym
from textworld import gym
from textworld import EnvInfos
import json
from openai import OpenAI
import os
from dotenv import load_dotenv
from pprint import pprint
from datetime import datetime
from sentence_transformers import SentenceTransformer
from elasticsearch import Elasticsearch

def generate_villager_dialog(self, user_input, action_type, memory):
    '''
    Generate dialogue about the night of the murder (well incident)
    Maintains original function structure with specialized prompt engineering
    '''
    logger.info(f"Generating event dialog with state: {self.get_current_obs()}")
    
    prompt = f"""
    <question>
    You are a timid villager in the game, your task is to generate defensive yet gradually revealing dialog. 
    Maintain character consistency through these layered parameters:
    </question>

    <story_background>
    You are a nervous villager in a small village. you are afraid the revenge and you don't want to tell others what you have heard that night.
    After three times that you could tell the sound that metal into the well that night.

    Key Facts:
    - Murder: Player was killed last night with a knife
    - Culprit: The vendor (but you're too scared to say this directly)
    </story_backgroud>


    <speaking_style>
    - Stutter when nervous ("I-I don't know...")
    - Avoid eye contact with others.
    - Drop hints only when pressured:
    1st ask: "I don't know...?"
    2nd ask: "I... I heard something by the well..."
    3rd ask: "*whisper* Metal hitting water... late at night..."
    </speaking_style>

    <game_state>
    location: you are in the house 2
    </game_state>
    
    <response requirements>
        - Your response should be a dialog based on the history conversation and the user's input and the memory.
        - The dialog should be in the same language as the user's input.
        - The dialog should be in the same style as the history conversation.
        - The dialog should be in the same tone as the history conversation.
        - The dialog should be in the same format as the history conversation.
        - The dialog should be as short as possible.
        - The output should be a single string sentence.
     </response requirements>
    """

    message = [{"role": "system", "content": prompt}]
    if self.dialog_history.get("villager"):
        for item in self.dialog_history["villager"][-3:]:  # Keep last 3 exchanges
            message.extend([
                {"role": "user", "content": item["user"]},
                {"role": "assistant", "content": item["assistant"]}
            ])
    
    message.append({"role": "user", "content": f"Player inquiry: [{user_input}]"})
    
    response = self.villager.chat.completions.create(
        model="deepseek-chat",
        messages=[{"role": "system", "content": prompt},
                  {"role": "user", "content": user_input}],
        temperature=0.3
        )
        
    logger.info(response.choices[0].message.content)
    self.dialog_history["villager"].append({"user": user_input, "assistant": response.choices[0].message.content})

    conversation = f"user: {user_input}\nassistant: {response.choices[0].message.content}"
    self.create_memory(conversation)
    return response.choices[0].message.content
    

